import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.function.Function;

public class EmployeeExcelWriter {

    public static void writeEmployeesToExcel(List<Employee> employees, String filePath) throws IOException {
        if (employees == null || employees.isEmpty()) {
            throw new IllegalArgumentException("Employee list is empty");
        }

        try (SXSSFWorkbook workbook = new SXSSFWorkbook(); FileOutputStream fileOut = new FileOutputStream(filePath)) {
            Sheet sheet = workbook.createSheet("Employees");

            // Create header font and style
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);

            CellStyle headerStyle = workbook.createCellStyle();
            headerStyle.setFont(headerFont);
            headerStyle.setAlignment(HorizontalAlignment.CENTER);

            // Create regular data cell style
            CellStyle dataStyle = workbook.createCellStyle();
            dataStyle.setAlignment(HorizontalAlignment.LEFT);

            // Define headers and data extractors
            List<String> headers = List.of("Employee Name", "Company", "Age", "Salary", "Date of Joining");
            List<Function<Employee, Object>> dataExtractors = List.of(
                Employee::getName,
                Employee::getCompany,
                Employee::getAge,
                Employee::getSalary,
                emp -> emp.getDateOfJoining().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
            );

            // Create header row
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.size(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers.get(i));
                cell.setCellStyle(headerStyle);
            }

            // Populate data rows
            int rowNum = 1;
            for (Employee emp : employees) {
                Row row = sheet.createRow(rowNum++);
                for (int i = 0; i < dataExtractors.size(); i++) {
                    Cell cell = row.createCell(i);
                    Object value = dataExtractors.get(i).apply(emp);

                    // Set cell value based on type
                    if (value instanceof Integer) {
                        cell.setCellValue((Integer) value);
                    } else if (value instanceof Double) {
                        cell.setCellValue((Double) value);
                    } else {
                        cell.setCellValue(value != null ? value.toString() : "");
                    }
                    cell.setCellStyle(dataStyle);
                }
            }

            // Adjust column widths to fit the content
            for (int i = 0; i < headers.size(); i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(fileOut);
        }
    }
}

==========================================

  import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import java.util.Map;

public class Employee {
    private String name;
    private String company;
    private int age;
    private double salary;
    private LocalDate dateOfJoining;

    // Constructors, getters, and setters

    public Employee(String name, String company, int age, double salary, LocalDate dateOfJoining) {
        this.name = name;
        this.company = company;
        this.age = age;
        this.salary = salary;
        this.dateOfJoining = dateOfJoining;
    }

    public Map<String, Object> toMap() {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        // Using LinkedHashMap to maintain insertion order for consistent column arrangement
        Map<String, Object> employeeData = new LinkedHashMap<>();
        employeeData.put("Employee Name", name);
        employeeData.put("Company", company);
        employeeData.put("Age", age);
        employeeData.put("Salary", salary);
        employeeData.put("Date of Joining", dateOfJoining.format(dateFormatter));

        return employeeData;
    }
}

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class EmployeeExcelWriter {

    public static void writeEmployeesToExcel(List<Employee> employees, String filePath) throws IOException {
        if (employees == null || employees.isEmpty()) {
            throw new IllegalArgumentException("Employee list is empty");
        }

        try (SXSSFWorkbook workbook = new SXSSFWorkbook(); FileOutputStream fileOut = new FileOutputStream(filePath)) {
            Sheet sheet = workbook.createSheet("Employees");

            // Create header font and style
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);

            CellStyle headerStyle = workbook.createCellStyle();
            headerStyle.setFont(headerFont);
            headerStyle.setAlignment(HorizontalAlignment.CENTER);

            // Create regular data cell style
            CellStyle dataStyle = workbook.createCellStyle();
            dataStyle.setAlignment(HorizontalAlignment.LEFT);

            // Get headers from the first employee
            Map<String, Object> firstEmployeeData = employees.get(0).toMap();
            int numColumns = firstEmployeeData.size();

            // Create header row
            Row headerRow = sheet.createRow(0);
            int colIndex = 0;
            for (String header : firstEmployeeData.keySet()) {
                Cell cell = headerRow.createCell(colIndex++);
                cell.setCellValue(header);
                cell.setCellStyle(headerStyle);
            }

            // Populate rows with employee data
            int rowNum = 1;
            for (Employee emp : employees) {
                Map<String, Object> employeeData = emp.toMap();
                Row row = sheet.createRow(rowNum++);

                colIndex = 0;
                for (Object value : employeeData.values()) {
                    Cell cell = row.createCell(colIndex++);

                    // Set cell value based on type
                    if (value instanceof Integer) {
                        cell.setCellValue((Integer) value);
                    } else if (value instanceof Double) {
                        cell.setCellValue((Double) value);
                    } else {
                        cell.setCellValue(value != null ? value.toString() : "");
                    }
                    cell.setCellStyle(dataStyle);
                }
            }

            // Adjust column widths to fit the content
            for (int i = 0; i < numColumns; i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(fileOut);
        }
    }
}

