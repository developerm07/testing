import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class DynamicJsonTransformer {

    public static void main(String[] args) {
        String jsonString = "{\"event\":{\"persons\":[{\"personname\":\"John\",\"details\":{\"age\":25,\"address\":{\"city\":\"New York\",\"zipcode\":\"10001\"}}},{\"personname\":\"Jane\",\"details\":{\"age\":30,\"address\":{\"city\":\"Los Angeles\",\"zipcode\":\"90001\"}}}]}}";

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(jsonString);

            // Define your mapping configuration
            Map<String, String> mapping = new HashMap<>();
            mapping.put("/event/persons/personname", "/emp/employees/emplname");
            mapping.put("/event/persons/details/age", "/emp/employees/info/years");
            mapping.put("/event/persons/details/address/city", "/emp/employees/info/location/city");
            mapping.put("/event/persons/details/address/zipcode", "/emp/employees/info/location/code");

            // Transform the input JSON using the dynamic mapping
            JsonNode outputNode = transformJson(root, mapping, objectMapper);

            // Convert the output to a JSON string
            String outputJson = objectMapper.writeValueAsString(outputNode);

            // Print the result
            System.out.println(outputJson);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static JsonNode transformJson(JsonNode inputNode, Map<String, String> mapping, ObjectMapper objectMapper) {
        if (inputNode.isObject()) {
            ObjectNode outputNode = objectMapper.createObjectNode();

            // Iterate through fields in the input node
            inputNode.fields().forEachRemaining(entry -> {
                String fieldName = entry.getKey();
                JsonNode fieldValue = entry.getValue();

                // Apply dynamic mapping
                String outputFieldPath = mapping.get(getJsonPath(entry));
                if (outputFieldPath != null) {
                    ((ObjectNode) outputNode).set(outputFieldPath, transformJson(fieldValue, mapping, objectMapper));
                } else {
                    ((ObjectNode) outputNode).set(fieldName, transformJson(fieldValue, mapping, objectMapper));
                }
            });

            return outputNode;
        } else if (inputNode.isArray()) {
            ArrayNode outputArray = objectMapper.createArrayNode();

            // Iterate through elements in the input array
            inputNode.elements().forEachRemaining(element -> outputArray.add(transformJson(element, mapping, objectMapper)));

            return outputArray;
        } else {
            // For simple values, return the value as is
            return inputNode;
        }
    }

    private static String getJsonPath(Map.Entry<String, JsonNode> entry) {
        // Helper method to get the JSON path of a given entry
        String path = entry.getKey();
        Iterator<Map.Entry<String, JsonNode>> parents = entry.getParent().fields();
        while (parents.hasNext()) {
            Map.Entry<String, JsonNode> parent = parents.next();
            path = parent.getKey() + "/" + path;
        }
        return "/" + path;
    }
}


//[/actuator/chaosmonkey],methods=[GET]
//[/actuator/chaosmonkey/watcher],methods=[GET]
//[/actuator/chaosmonkey/assaults],methods=[GET]
//[/actuator/chaosmonkey/enable],methods=[POST]
//[/actuator/chaosmonkey/disable],methods=[POST]
//[/actuator/chaosmonkey/status],methods=[GET]
//[/actuator/chaosmonkey/assaults],methods=[POST]
