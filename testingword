import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class ObjectMapperExample {
    public static void main(String[] args) {
        ObjectMapper objectMapper = new ObjectMapper();

        // Sample JSON string for Object1 (with data)
        String jsonString1 = "{\n" +
                "  \"eventName\": \"EventABC\",\n" +
                "  \"customers\": [\n" +
                "    { \"name\": \"Customer1\", \"id\": \"1\" },\n" +
                "    { \"name\": \"Customer2\", \"id\": \"2\" }\n" +
                "  ]\n" +
                "}";

        // Sample JSON string for Object2 (initialized with null values and size 1)
        String jsonString2 = "{\n" +
                "  \"eventId\": null,\n" +
                "  \"persons\": [null]\n" +
                "}";

        try {
            // Parse JSON strings into JsonNode
            JsonNode jsonNode1 = objectMapper.readTree(jsonString1);
            JsonNode jsonNode2 = objectMapper.readTree(jsonString2);

            // Define a mapping between fields in Object1 and Object2
            // Here we are mapping Object1/eventName -> Object2/eventId
            // and Object1/customers/name -> Object2/persons/name
            Map<String, String> fieldMapping = new HashMap<>();
            fieldMapping.put("eventName", "eventId");
            fieldMapping.put("customers.name", "persons.name");
            fieldMapping.put("customers.id", "persons.id");

            // Iterate through the mapping and copy data
            for (Map.Entry<String, String> entry : fieldMapping.entrySet()) {
                String sourceField = entry.getKey();
                String targetField = entry.getValue();

                // Get the source value
                JsonNode sourceValue = jsonNode1.at(sourceField);

                // Get the target node
                JsonNode targetNode = jsonNode2.at(targetField);

                // Copy the data
                if (sourceValue.isArray() && targetNode.isArray()) {
                    // If both are arrays, handle the array elements
                    copyArrayData((ArrayNode) sourceValue, (ArrayNode) targetNode);
                } else {
                    // Otherwise, copy the value
                    ((ObjectNode) jsonNode2).set(targetField, sourceValue.isNull()
                            ? objectMapper.nullNode()
                            : sourceValue.deepCopy());
                }
            }

            // Updated jsonNode2 now contains the copied data
            String updatedJsonString2 = objectMapper.writeValueAsString(jsonNode2);
            System.out.println(updatedJsonString2);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void copyArrayData(ArrayNode sourceArray, ArrayNode targetArray) {
        targetArray.removeAll();
        for (JsonNode element : sourceArray) {
            targetArray.add(element.deepCopy());
        }
    }
}
