templates:
  - id: 1
    mappings:
      - from: person.contacts.phone.home
        to: company.employees.contact_info.phone.cell
      - from: person.name
        to: company.employees.name
  - id: 2
    mappings:
      - from: person.address.city
        to: company.employees.department.location
      - from: person.address.state
        to: company.employees.department.state

ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
JsonNode mappings = mapper.readTree(new File("mappings.yaml"));

int templateId = 1;
for (JsonNode template : mappings.get("templates")) {
    if (template.get("id").asInt() == templateId) {
        for (JsonNode mapping : template.get("mappings")) {
            String from = mapping.get("from").asText();
            String to = mapping.get("to").asText();

            // Apply the mapping to the JSON object
        }
    }
}
public static void main(String[] args) throws IOException {
    ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
    String yaml = "mappings:\n  - from: person.contacts.phone.home\n    to: company.employees.contact_info.phone.cell\n";
    String json1 = "{\"person\": {\"contacts\": {\"phone\": {\"home\": \"555-1234\"}}}}";
    String json2 = "{\"company\": {\"employees\": [{\"contact_info\": {\"phone\": {\"cell\": \"555-1111\"}}},{\"contact_info\": {\"phone\": {\"cell\": \"555-3333\"}}}]}}";

    JsonNode node1 = mapper.readTree(yaml);
    JsonNode node2 = mapper.readTree(json2);

    for (JsonNode mapping : node1.get("mappings")) {
        String[] from = mapping.get("from").asText().split("\\.");
        String[] to = mapping.get("to").asText().split("\\.");

        JsonNode value1 = mapper.readTree(json1);
        JsonNode value2 = node2;
        for (int i = 0; i < from.length - 1; i++) {
            value1 = value1.get(from[i]);
            value2 = value2.get(to[i]);
        }

        JsonNode sourceValue = value1.get(from[from.length - 1]);
        if (sourceValue != null) {
            ((ObjectNode) value2.get(to[to.length - 2]).get(to[to.length - 1])).put(to[to.length - 1], sourceValue.asText());
        }
    }

    System.out.println(node2);
}
