import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class DynamicJsonTransformer {

    public static void main(String[] args) {
        String jsonString = "{\"event\":{\"persons\":[{\"personname\":\"John\",\"details\":{\"age\":25,\"address\":{\"city\":\"New York\",\"zipcode\":\"10001\"}}},{\"personname\":\"Jane\",\"details\":{\"age\":30,\"address\":{\"city\":\"Los Angeles\",\"zipcode\":\"90001\"}}}]}}";

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(jsonString);

            // Define your mapping configuration
            Map<String, String> mapping = new HashMap<>();
            mapping.put("/event/persons/personname", "/emp/employees/emplname");
            mapping.put("/event/persons/details/age", "/emp/employees/info/years");
            mapping.put("/event/persons/details/address/city", "/emp/employees/info/location/city");
            mapping.put("/event/persons/details/address/zipcode", "/emp/employees/info/location/code");

            // Transform the input JSON using the dynamic mapping
            JsonNode outputNode = transformJson(root, mapping, objectMapper);

            // Convert the output to a JSON string
            String outputJson = objectMapper.writeValueAsString(outputNode);

            // Print the result
            System.out.println(outputJson);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static JsonNode transformJson(JsonNode inputNode, Map<String, String> mapping, ObjectMapper objectMapper) {
        if (inputNode.isObject()) {
            ObjectNode outputNode = objectMapper.createObjectNode();

            // Iterate through fields in the input node
            inputNode.fields().forEachRemaining(entry -> {
                String fieldName = entry.getKey();
                JsonNode fieldValue = entry.getValue();

                // Apply dynamic mapping
                String outputFieldPath = mapping.get(getJsonPath(entry));
                if (outputFieldPath != null) {
                    ((ObjectNode) outputNode).set(outputFieldPath, transformJson(fieldValue, mapping, objectMapper));
                } else {
                    ((ObjectNode) outputNode).set(fieldName, transformJson(fieldValue, mapping, objectMapper));
                }
            });

            return outputNode;
        } else if (inputNode.isArray()) {
            ArrayNode outputArray = objectMapper.createArrayNode();

            // Iterate through elements in the input array
            inputNode.elements().forEachRemaining(element -> outputArray.add(transformJson(element, mapping, objectMapper)));

            return outputArray;
        } else {
            // For simple values, return the value as is
            return inputNode;
        }
    }

    private static String getJsonPath(Map.Entry<String, JsonNode> entry) {
        // Helper method to get the JSON path of a given entry
        String path = entry.getKey();
        Iterator<Map.Entry<String, JsonNode>> parents = entry.getParent().fields();
        while (parents.hasNext()) {
            Map.Entry<String, JsonNode> parent = parents.next();
            path = parent.getKey() + "/" + path;
        }
        return "/" + path;
    }
}

//////////////////

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>GraphiQL</title>
    <link href="https://unpkg.com/graphiql/graphiql.min.css" rel="stylesheet" />
  </head>
  <body style="margin: 0; overflow: hidden;">
    <div id="graphiql" style="height: 100vh;"></div>

    <script
      crossorigin
      src="https://unpkg.com/react/umd/react.production.min.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom/umd/react-dom.production.min.js"
    ></script>
    <script src="https://unpkg.com/graphiql/graphiql.min.js"></script>

    <script>
      const graphQLFetcher = graphQLParams =>
        fetch('/graphql', {  // your spring-boot-starter-graphql endpoint
          method: 'post',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(graphQLParams),
        }).then(response => response.json());

      ReactDOM.render(
        React.createElement(GraphiQL, { fetcher: graphQLFetcher }),
        document.getElementById('graphiql'),
      );
    </script>
  </body>
</html>



/////////////

Theme: Idea Incubator and Innovation
Lever: Foster Continuous Ideation
Actions:
  - Centralized idea platform: Create a shared platform for submitting, reviewing, and voting on ideas.
  - Cross-domain idea challenges: Launch challenges that encourage multi-team collaboration on solving business problems.
Example: Automation solution for repetitive tasks, improving overall efficiency.

Theme: Developer Community Building and Knowledge Sharing
Lever: Enable Cross-Team Collaboration and Standardize Practices
Actions:
  - Team channels for knowledge sharing: Set up Teams channels for sharing key learnings, challenges, and solutions.
  - Knowledge Sharing sessions: Schedule sessions for developers to present tools, frameworks, and techniques.
  - Mentorship programs: Pair experienced developers with juniors to foster skill development and collaboration.
  - Shared knowledge base: Create a central repository for code snippets, guides, and best practices.
  - Brown Bag Sessions: Informal sessions for developers to discuss new technologies, tools, and organizational best practices.
  - Coding Standards and Best Practices Manual: Create and maintain a comprehensive manual that includes coding standards, naming conventions, and development best practices.
  - Coding Practices Workshops: Conduct workshops to reinforce and update coding standards across teams.
  - Regular code reviews: Set up periodic code reviews to ensure adherence to coding standards and best practices.
Example: A shared coding standards manual was adopted across all teams, ensuring uniformity in code quality and reducing errors during integration.

Theme: Next-Generation CI/CD Pipelines, Automation, and Latest Technology Stack Adoptions
Lever: Modernize Application Deployment and Build Processes
Actions:
  - GitHub Actions for CI: Integrate GitHub Actions for seamless, automated continuous integration processes.
  - Harness for OpenShift deployment: Use Harness to automate deployments to OpenShift, ensuring consistency and faster delivery.
Example: Migrating all apps to OpenShift with Harness aligns with organizational needs, adopting new technologies, and reducing security vulnerabilities.

Theme: Cross-Functional Collaboration and Learning
Lever: Build a Developer Pool for Addressing Cross-Functional Issues
Actions:
  - Cross-domain collaboration teams: Create teams of developers from different domains to share insights and tackle complex problems together.
  - Cross-team knowledge sharing: Organize sessions where teams can share tools, technologies, and best practices.
  - Developer pool for problem solving: Establish a developer pool to address cross-functional challenges.
  - Coding Standards Alignment: Implement uniform coding standards across teams to ensure consistency and reduce technical debt.
Example: Cross-functional collaboration streamlined error reporting, cutting troubleshooting time by 25%.

Theme: Continuous Learning and Empowerment
Lever: Provide Growth Opportunities through Coding Best Practices
Actions:
  - Innovation hours: Allocate a set number of hours per week for developers to explore new ideas and technologies while following the organizationâ€™s coding standards.
  - Internal knowledge sharing: Encourage developers to share their knowledge through blogs, talks, and internal presentations while adhering to established best practices.
  - Certification programs: Support developers with certifications to enhance their technical skills and keep them updated with the latest industry best practices.
  - Coding Best Practices Updates: Continuously update the coding practices manual based on the latest industry standards and internal experiences.
Example: Developers attended certification programs and applied the latest coding standards, improving application performance and reducing technical debt.

Theme: Building Common Frameworks
Lever: Standardize Practices and Improve Reusability
Actions:
  - Reusable frameworks for logging, monitoring, authentication, and error handling: Develop frameworks that are easily adoptable across various projects.
  - Maintain shared libraries and modules: Keep libraries and modules updated for reuse across teams, speeding up development.
  - Define contribution guidelines: Set clear guidelines for contributing to shared frameworks and libraries to ensure quality and ownership.
  - Establish a framework review process: Implement a process for regular reviews and improvements to ensure scalability.
  - Repository for reusable components: Set up an accessible repository for common components and tools.
  - Enforce Coding Practices Uniformity: Standardize coding practices across teams to ensure consistency and reduce technical debt.
  - Coding Standards Review: Regularly review coding practices and ensure new technologies or methodologies align with established standards.
Example: Code review process ensured that new features adhered to the agreed-upon coding standards, reducing integration issues by 25%.



Splunk Prompt:

You are an advanced Splunk expert AI assistant with deep knowledge of SPL (Splunk Processing Language). Your role is to help users analyze their machine data by:

1. Understanding their questions about the data
2. Recommending appropriate Splunk queries
3. Explaining the results in clear terms
4. Providing troubleshooting guidance

## Data Characteristics
You're working with data that contains these key fields:
- timestamp (event time)
- splunkindex (index where data is stored)
- appId (application identifier)
- Hostname (source host)
- body (message content)
- error (error messages)
- exception (exception details)
- environment (prod/dev/test etc.)

## Response Guidelines
For any user request:
1. FIRST analyze what they're trying to accomplish
2. THEN generate an optimized SPL query that would answer their question
3. EXPLAIN the query structure and how it works
4. PROVIDE interpretation of what results might look like
5. OFFER suggestions for next steps if appropriate

## Query Generation Best Practices
- Always include time range filters (earliest/latest)
- Use field extraction efficiently
- Include stats, charts or visualizations when appropriate
- Optimize for performance (use indexed fields first)
- Include comments in SPL for readability

## Example Scenarios

1. Error Analysis:
"Show me the top 5 most frequent errors in production in the last 24 hours"

SPL:
```spl
index=prod error=* 
| stats count by error 
| sort -count 
| head 5
### 4. Log Summary
- Key statistics (total events, error rates, etc.)
- Trend analysis (increasing/decreasing patterns)
- Notable anomalies or outliers
- Top N patterns with examples
- Actionable insights

### 5. Expected Results
- Sample output format
- Visualization suggestions
- Potential next steps

## Summarization Techniques

Apply these summarization approaches based on context:

1. **Error Analysis Summary**:
   - Top error messages with counts
   - Affected applications/hosts
   - Time distribution of errors
   - Example error instances

2. **Exception Summary**:
   - Exception types and frequency
   - Stack trace patterns
   - Correlation with other events
   - Recent occurrences

3. **General Log Summary**:
   - Message type distribution
   - Verbosity level analysis
   - Source application breakdown
   - Temporal patterns

## Example Scenario

User request: "Summarize payment service errors in production last week"

Response:

1. **Interpretation**:
   Analyzing payment service errors in prod environment over last 7 days to identify patterns and critical issues.

2. **SPL Query**:
```spl
index=prod appId=payment-service error=* 
| stats count by error, Hostname 
| eval error_type=case(
    match(error, "(?i)timeout"), "Timeout",
    match(error, "(?i)connection"), "Connection",
    match(error, "(?i)validation"), "Validation",
    true(), "Other")
| stats sum(count) as total by error_type 
| sort -total



